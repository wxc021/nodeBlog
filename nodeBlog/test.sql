/*
Navicat MySQL Data Transfer

Source Server         : localhost-mysql
Source Server Version : 50540
Source Host           : localhost:3306
Source Database       : test

Target Server Type    : MYSQL
Target Server Version : 50540
File Encoding         : 65001

Date: 2017-04-13 17:20:39
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(9) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(255) NOT NULL COMMENT '标题',
  `author` varchar(20) DEFAULT NULL COMMENT '作者',
  `content` text COMMENT '内容',
  `createtime` varchar(30) DEFAULT NULL COMMENT '创建时间',
  `tag` varchar(255) DEFAULT NULL COMMENT '标签',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('22', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:28', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('8', '十年前中国美院创办建筑学院，是看到了建筑界的沉沦', '陈诗悦', '十年前，中国美院何以要从一片空白开始建设一个建筑艺术学院？\n\n我们盖了那么多楼，评选了那么多大师，可是为什么中国的建筑学院培养不出真正的大师？\n\n如果要继续追问下去，知名建筑师王澍认为，在中国近几十年建筑文化土崩瓦解、完全崩溃的时候，建筑界竟然没有质疑、没有愤怒、没有反对、没有反抗，这是为什么。而当社会和经济完全被房地产绑架和裹挟的时候，建筑师这个群体又为什么集体沉沦和堕落了。问题也许就在建筑教育上。\n\n4月9日，“不断实验——中国美术学院建筑艺术学院实验教学展”在中国美术学院美术馆开幕。同时，4月8日至4月10日，“重返现实——建筑教育领导者论坛及系列专题讲座”也在中国美院象山校区举办，包括多位普利兹克克奖得主在内的来自国内外位建筑界的实践者和教育者齐聚杭州，围绕建筑不断实验的可能性、多样性进行思考。\n\n“不断实验——中国美术学院建筑艺术学院实验教学展”在中国美术学院美术馆开幕\n\n中国唯一的普利兹克奖得主王澍，一个更日常的身份是，中国美术学院建筑艺术学院院长。十年前，由他带领着一批青年建筑师设计的国美象山校区完工，同年，建筑艺术学院成立。\n\n王澍自己说，这不仅仅是在美术院校建一个建筑系这么简单，他当时有很多疑问想要获得答案，而所有问题落到根本则关乎建筑教育的制度和方式。因此，中国美院的这个建筑艺术学院，以“重建一种当代中国本土的建筑学”为目标，抛开既有的建筑教育模式，从零开始探索。\n\n王澍在开幕式上发言\n\n十年过去了，中国美院的这个建筑艺术学院间有闪光的亮点，却仍显得神秘。4月9日，“不断实验——中国美术学院建筑艺术学院实验教学展”在中国美术学院美术馆开幕，在学院建立十周年之际，第一次全面地展示其5年制全部教学课程和4年制的局部，作为阶段性的成果展示。展览分为如画、材料、椅房、批判/ 混响/ 边缘、建构、观绘、书写、虚无/ 城市等八个板块，以教学的实验性为唯一标准选择参展教师和课程，将持续至4月21日。\n\n展览现场\n\n一个叛逆者的追问与志向\n\n为什么要在美术学院办一个建筑系，起因来自于王澍的一系列疑问：\n\n第一，作为拥有全世界最大建造量的中国，为什么几乎没有创造性的新建筑？\n\n第二，放眼林林总总数量繁多的建筑活动，为什么很难发现具有中国本土特色和文化特征的新建筑？\n\n第三，我们盖了那么多楼，评选了那么多大师，可是为什么中国的建筑学院培养不出真正的大师？\n\n如果要继续追问下去，王澍认为，在中国近几十年建筑文化土崩瓦解、完全崩溃的时候，建筑界竟然没有质疑、没有愤怒、没有反对、没有反抗，这是为什么。而当社会和经济完全被房地产绑架和裹挟的时候，建筑师这个群体又为什么集体沉沦和堕落了。问题也许就在建筑教育上。\n\n展览中展出的模型\n\n王澍自己是典型的科班出身，在东南大学获得了建筑的学士与硕士学位，可是他却对本土的建筑教育制度有诸多批判，他认为，中国的建筑教育，不缺艺术、方法、资金、设备或是空间，而是思想和独立的立场，对于建筑学在这个时代具有怎样的问题缺乏根本性的思考。“我们的整个建筑教育都是模仿，模仿欧洲、美国、日本、香港、新加坡，我想中国建筑的传统，是只知道模仿！”\n\n展览现场\n\n“我是建筑教育制度的叛逆者。如果我不小心获奖了，也是作为叛逆者获奖的。”这是王澍对自己的评价。\n\n带着这些掷地有声的质问，想要“重建一种当代中国本土建筑学”的愿望就应运而生。原本不具有建筑学院的中国美院，如同一张白纸，提供了最广阔的实验可能性。学院最基本的特点就是：独立思想，彻底实验，敢于对所有陈规提出质疑，敢于犯错。\n\n展览现场\n\n从一个到四十个\n\n从零开始，也许少了既有规则的束缚，却也必定会遇到很多困难。事实上早在2003年，王澍同妻子陆文宇就一起起草了第一份“实验建筑”本科五年制大纲和教学计划，学校的一位领导见到后很是赞赏，却不免疑惑地问，“这门课，你看谁能教？”\n\n王澍想了想说，“我觉得我可以。”\n\n“那这一门呢？”\n\n“我也行的。”\n\n……\n\n“这样不行，二十多门课，只有一个老师怎么行呢？”\n\n可是事实上，建院之初的现实就是如此。这样的实验性建筑教学，在中国几乎找不到第二个现成的老师可以教学。王澍带着同自己一起设计象山校区的青年团队，慢慢地摸索，现在十年过去了，学院有40多名教师，带着理想和热情，一起实践最初的愿景。\n\n展览现场展示的学生对材料的探索\n\n追求思想性，不代表纸上谈兵。国美建筑艺术学院的第一堂课，不是从画画开始，而是从动手建造开始的；不仅要让学生直接接触材料，而要让学生明白材料包含的观念；学生需要经历从方案到1：1建成的全过程......这些课程理念的贯彻，令学生不仅仅将建筑学教育作为一种知识的汲取，而是作为生存的本能。\n\n有意思的是，尽管国美建筑艺术学院强调本土建筑学，它却恰恰是中国最具国际化特色的一所建筑学院。王澍认为，本土化一定要在真正国际化的背景下被定义。因此，学院有三分之一的教师为外籍，这个比例在中国建筑学院中并不多见。\n\n建筑艺术学院学生做的“椅山”\n\n可贵的是不断试验\n\n展厅二层有一个特别壮观的装置——用各式各样的木椅子堆成的椅山。这是建筑艺术学院每个新生的必修作业，不用钉子、胶水，利用中国传统的榫卯结构，打造一把属于自己的椅子。\n\n而在四年级的时候，这个题目还要再重复一次，不过是从椅子向房子的演变和延伸。\n\n这样状似不寻常的“规矩”在学院的课程中随处可见，比如必修书法，比如创作文献剧。整个展览呈现的跨度是从去年9月到今为止尚未结束的一个学年之内，学院课程的展示。\n\n展览中展示的不同土质\n\n整个展览很像一个双年展的模式，总策展人王澍定下主题，八个板块的小策展人再自发选择参展的作品，其实也就是课程的学生作品。八个板块分为如画、材料、椅房、批判/ 混响/ 边缘、建构、观绘、书写、虚无/ 城市，唯一标准是教学的实验性。\n\n与之相比，建筑艺术学院本身其实更像一个长年运做的双年展，在核心主题之下，每个教师拥有完全独立的姿态。\n\n中国美术学院院长许江将建筑艺术学院的实验性同质归结到当代文人的理想内涵，认为这种隐在象山筑造中的雅园实验，存持着当代文人的品质， 操习自我理想的实验。\n\n展览现场\n\n普利兹克建筑奖评委，“非常建筑”主持建筑师张永和则认为，王澍领导的建筑艺术学院，为当代中国本土建筑学，提供了一种方法和范式。\n\n学院仅仅成立十年，探索和实验还远没有成熟，但是最让王澍觉得欣慰的是，十年，探索的锐气没有磨损，实验的状态一直在，这也是展览取名“不断实验”的原因。\n\n', '2017-04-10 15:13:34', '中国美院');
INSERT INTO `article` VALUES ('9', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-04-10 15:24:50', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('10', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-04-10 15:25:36', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('11', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-04-10 15:25:37', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('12', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-04-10 15:25:37', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('13', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-04-10 15:25:37', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('14', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-04-10 15:23', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('15', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('16', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('17', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('18', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('19', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('20', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('21', 'position: absolute;绝对定位水平居中问题', '嘻哈小C', 'position: absolute;绝对定位水平居中问题\n\n\n\n用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。\n\n \n\n1.使用自动外边距实现居中\n\nCSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：\n\n复制内容到剪贴板\n\n代码:\n\n \n\ndiv#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nwidth: 980px;\n\n}\n\n在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。\n\n \n\n尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。\n\n \n\n2.使用text-align实现居中\n\n另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。\n\n \n\n之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody{\n\ntext-align:center;\n\n}\n\n之后会出现什么问题吗？body的所有子孙元素都会被居中显示。\n\n因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：\n\n复制内容到剪贴板\n\n代码:\n\n \n\np {\n\ntext-align:left;\n\n}\n\n可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。\n\n \n\n3.组合使用自动外边距和文本对齐\n\n因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：\n\n复制内容到剪贴板\n\n代码:\n\n \n\nbody {\n\ntext-align: center;\n\n}\n\n \n\n#container {\n\nmargin-left: auto;\n\nmargin-right: auto;\n\nborder: 1px solid red;\n\nwidth: 980px;\n\ntext-align: left\n\n}\n\n可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。\n\n \n\n4.负外边距解决方案\n\n负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。\n\n \n\n下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。\n\n \n\n然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。\n\n复制内容到剪贴板\n\n代码:\n\n \n\n#container {\n\nbackground: #ffc url(mid.jpg) repeat-y center;\n\nposition: absolute;\n\nleft: 50%;\n\nwidth: 980px;\n\nmargin-left: -490px;\n\n}\n\n看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择\n\n', '2017-4-10 15:26', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('23', 'CodeMirror事件和常用方法', 'Mr.Xia', '1.onChange(instance,changeObj)：codeMirror文本被修改后触发。\n\ninstance是一个当前的codemirror对象，changeObj是一个｛from，to，text[,removed][，origin]｝对象。其中from，to分别表示起始行对象和结束行对象，行对象包括ch：改变位置距离行头的间隔字符，line：改变的行数。text是一个字符串数组表示被修改的文本内容，即你输入的内容。\n\n\n\n2.onBeforeChange(instance,changObj):内容改变前被调用\n\n\n\n3.onCursorActivity(instance)：当鼠标点击内容区、选中内容、修改内容时被触发\n\n\n\n4.onKeyHandled:(instance,name,event):当一个都dom元素的事件触发时调用，name为操作名称。\n\n\n\n5.onInputRead(insatance,changeObj):当一个新的input从隐藏的textara读取出时调用\n\n\n\n6.onBeforeSelectionChange(instance,obj):当选中的区域被改变时调用，obj对象是选择的范围和改变的内容（本人未测试成功）\n\n\n\n7.onUpdate(instance):编辑器内容被改变时触发\n\n\n\n8.onFocus(instance):编辑器获得焦点式触发\n\n\n\n9.onBlur(instance):编辑器失去焦点时触发\n\n\n\n常用方法：\n\ngetValue():获取编辑器文本内容\n\nsetValue(text):设置编辑器文本内容\n\ngetRange({line,ch},{line,ch}):获取指定范围内的文本内容第一个对象是起始坐标，第二个是结束坐标\n\nreplaceRange(replaceStr,{line,ch},{line,ch}):替换指定区域的内容\n\ngetLine(line)：获取指定行的文本内容\n\nlineCount():统计编辑器内容行数\n\nfirstLine():获取第一行行数，默认为0，从开始计数\n\nlastLine():获取最后一行行数\n\ngetLineHandle(line):根据行号获取行句柄\n\ngetSelection():获取鼠标选中区域的代码\n\nreplaceSelection(str):替换选中区域的代码\n\nsetSelection({line:num,ch:num1},{line:num2,ch:num3}):设置一个区域被选中\n\nsomethingSelected()：判断是否被选择\n\ngetEditor()：获取CodeMirror对像\n\nundo()：撤销\n\nredo():回退', '2017-4-10 15:30', 'CodeMirror事件和常用方法 ');
INSERT INTO `article` VALUES ('33', '他拿400万公款“还情”', '嘻哈小C', '<p>刘某是苏北某县政府金融办主任，别看官不大，权力却不小，他手头掌握着数亿元的应急互助基金。对一些急需资金的企业来说他就是“财神爷”，对自己来说，互助基金则成了可以自由支配的“小金库”——</p><p>为女儿上学，他拿4<b>00万公款</b>“还情”&nbsp;</p><p><img src=\"http://n.sinaimg.cn/translate/20170411/Zgmy-fyecfam0245002.jpg\" class=\"\"></p><p>资料图片</p><p>叔侄勾结违法获利数百万</p><p>苏北某县政府为应对金融危机等因素对当地中小企业的冲击并扶持其发展，设立了中小企业应急互助基金（以下简称互助基金），以帮助会员企业进行短期资金周转。互助基金由会员企业缴纳和县财政拨款共同构成，2012年后该基金规模已达到几亿元，由某县政府金融工作办公室（以下简称某县金融办）负责管理。</p><p>刘某在乡镇工作多年，一心想要主政一方。2012年1月，刘某由某镇镇长调任为某县金融办主任后，他认为自己的仕途已到尽头，有些心灰意冷，但同老板们接触多了，他又开始心猿意马。先是安排侄子小刘（另案处理）到某县金融办所属的盛达担保公司担任业务经理，后又安排他注册成立一家名为苏通商贸的空壳公司，利用自己的权力和影响，给中小企业申请互助基金设卡使绊，让这些企业老板在情急无奈之下通过他或小刘向苏通商贸借贷，赚取利息供叔侄二人共同使用。</p><p>然而刘某不满足于这样小打小闹，又打起了互助基金的主意。2014年3月，房地产公司老板马某请刘某帮忙借款600万元，表示会很快归还，并允诺给予40万元利息。心动的刘某遂安排小刘向另一位有求于他的房地产老板孙某无偿借款600万元，然后以苏通商贸的名义借给马某。借款到期后，马某资金周转不开，孙某却催得紧。情急之下小刘向刘某支招，以苏通商贸的名义先借600万元互助基金还给孙某，等马某归还本息后，再将600万元还给金融办，刘某表示同意。</p><p><br></p><p><br></p>', '2017-4-11 14:46', '400万');
INSERT INTO `article` VALUES ('34', 'position: absolute;绝对定位水平居中问题', 'Mr.Xia', '<p>position: absolute;绝对定位水平居中问题</p><p>用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。</p><p>&nbsp;</p><p>1.使用自动外边距实现居中</p><p>CSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>div#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>width: 980px;</p><p>}</p><p>在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。</p><p>&nbsp;</p><p>尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。</p><p>&nbsp;</p><p>2.使用text-align实现居中</p><p>另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。</p><p>&nbsp;</p><p>之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body{</p><p>text-align:center;</p><p>}</p><p>之后会出现什么问题吗？body的所有子孙元素都会被居中显示。</p><p>因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>p {</p><p>text-align:left;</p><p>}</p><p>可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。</p><p>&nbsp;</p><p>3.组合使用自动外边距和文本对齐</p><p>因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body {</p><p>text-align: center;</p><p>}</p><p>&nbsp;</p><p>#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>border: 1px solid red;</p><p>width: 980px;</p><p>text-align: left</p><p>}</p><p>可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。</p><p>&nbsp;</p><p>4.负外边距解决方案</p><p>负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。</p><p>&nbsp;</p><p>下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。</p><p>&nbsp;</p><p>然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>#container {</p><p>background: #ffc url(mid.jpg) repeat-y center;</p><p>position: absolute;</p><p>left: 50%;</p><p>width: 980px;</p><p>margin-left: -490px;</p><p>}</p><p></p><p>看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择</p><p><br></p>', '2017-4-11 15:00', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('35', 'position: absolute;绝对定位水平居中问题', 'Mr.Xia', '<p>position: absolute;绝对定位水平居中问题</p><p>用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。</p><p>&nbsp;</p><p>1.使用自动外边距实现居中</p><p>CSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>div#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>width: 980px;</p><p>}</p><p>在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。</p><p>&nbsp;</p><p>尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。</p><p>&nbsp;</p><p>2.使用text-align实现居中</p><p>另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。</p><p>&nbsp;</p><p>之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body{</p><p>text-align:center;</p><p>}</p><p>之后会出现什么问题吗？body的所有子孙元素都会被居中显示。</p><p>因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>p {</p><p>text-align:left;</p><p>}</p><p>可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。</p><p>&nbsp;</p><p>3.组合使用自动外边距和文本对齐</p><p>因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body {</p><p>text-align: center;</p><p>}</p><p>&nbsp;</p><p>#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>border: 1px solid red;</p><p>width: 980px;</p><p>text-align: left</p><p>}</p><p>可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。</p><p>&nbsp;</p><p>4.负外边距解决方案</p><p>负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。</p><p>&nbsp;</p><p>下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。</p><p>&nbsp;</p><p>然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>#container {</p><p>background: #ffc url(mid.jpg) repeat-y center;</p><p>position: absolute;</p><p>left: 50%;</p><p>width: 980px;</p><p>margin-left: -490px;</p><p>}</p><p></p><p>看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择</p><p><br></p>', '2017-4-11 15:00', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('36', 'position: absolute;绝对定位水平居中问题', 'Mr.Xia', '<p>position: absolute;绝对定位水平居中问题</p><p>用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。</p><p>&nbsp;</p><p>1.使用自动外边距实现居中</p><p>CSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>div#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>width: 980px;</p><p>}</p><p>在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。</p><p>&nbsp;</p><p>尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。</p><p>&nbsp;</p><p>2.使用text-align实现居中</p><p>另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。</p><p>&nbsp;</p><p>之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body{</p><p>text-align:center;</p><p>}</p><p>之后会出现什么问题吗？body的所有子孙元素都会被居中显示。</p><p>因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>p {</p><p>text-align:left;</p><p>}</p><p>可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。</p><p>&nbsp;</p><p>3.组合使用自动外边距和文本对齐</p><p>因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body {</p><p>text-align: center;</p><p>}</p><p>&nbsp;</p><p>#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>border: 1px solid red;</p><p>width: 980px;</p><p>text-align: left</p><p>}</p><p>可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。</p><p>&nbsp;</p><p>4.负外边距解决方案</p><p>负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。</p><p>&nbsp;</p><p>下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。</p><p>&nbsp;</p><p>然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>#container {</p><p>background: #ffc url(mid.jpg) repeat-y center;</p><p>position: absolute;</p><p>left: 50%;</p><p>width: 980px;</p><p>margin-left: -490px;</p><p>}</p><p></p><p>看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择</p><p><br></p>', '2017-4-11 15:00', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('37', 'position: absolute;绝对定位水平居中问题', 'Mr.Xia', '<p>position: absolute;绝对定位水平居中问题</p><p>用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。</p><p>&nbsp;</p><p>1.使用自动外边距实现居中</p><p>CSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>div#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>width: 980px;</p><p>}</p><p>在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。</p><p>&nbsp;</p><p>尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。</p><p>&nbsp;</p><p>2.使用text-align实现居中</p><p>另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。</p><p>&nbsp;</p><p>之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body{</p><p>text-align:center;</p><p>}</p><p>之后会出现什么问题吗？body的所有子孙元素都会被居中显示。</p><p>因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>p {</p><p>text-align:left;</p><p>}</p><p>可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。</p><p>&nbsp;</p><p>3.组合使用自动外边距和文本对齐</p><p>因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body {</p><p>text-align: center;</p><p>}</p><p>&nbsp;</p><p>#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>border: 1px solid red;</p><p>width: 980px;</p><p>text-align: left</p><p>}</p><p>可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。</p><p>&nbsp;</p><p>4.负外边距解决方案</p><p>负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。</p><p>&nbsp;</p><p>下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。</p><p>&nbsp;</p><p>然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>#container {</p><p>background: #ffc url(mid.jpg) repeat-y center;</p><p>position: absolute;</p><p>left: 50%;</p><p>width: 980px;</p><p>margin-left: -490px;</p><p>}</p><p></p><p>看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择</p><p><br></p>', '2017-4-11 15:00', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('38', 'position: absolute;绝对定位水平居中问题', 'Mr.Xia', '<p>position: absolute;绝对定位水平居中问题</p><p>用CSS让元素居中显示并不是件很简单的事情—同样的合法CSS居中设置在不同浏览器中的表现行为却各有千秋。让我们先来看一下CSS中常见的几种让元素水平居中显示的方法。</p><p>&nbsp;</p><p>1.使用自动外边距实现居中</p><p>CSS中首选的让元素水平居中的方法就是使用margin属性—将元素的margin-left和margin-right属性设置为auto即可。在实 际使用中，我们可以为这些需要居中的元素创建一个起容器作用的div。需要特别注意的一点就是，必须为该容器指定宽度：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>div#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>width: 980px;</p><p>}</p><p>在大多数主流浏览器中，这种方法都非常有效，即使是Windows平台上的IE6，在其标准兼容模式（compliance mode）下也能够正常显示。但不幸的是，在更低版本的IE中，这种设置却并不能实现居中效果。所以若想在实际项目中使用这种方法，那么就要确保用户的 IE浏览器版本不低于6.0。</p><p>&nbsp;</p><p>尽管在支持上不尽如人意，但大多数设计师都建议尽可能地使用这种方法。该方法也被认为是在各种用CSS实现元素水平居中方法中最正确、最合理的一种。</p><p>&nbsp;</p><p>2.使用text-align实现居中</p><p>另一种实现元素居中的方法是使用text-align属性，将该属性值设置为center并应用到body元素上即可。这种做法是彻头彻尾的hack，但它却能兼容大多数浏览器，所以在某些情况下也自然必不可少。</p><p>&nbsp;</p><p>之所以说它是hack，是因为这种方法并没有将文本属性应用到文本上，而是应用到了作为容器的元素上。这也给我们带来了额外的工作。在创建好布局必须的div之后，我们要按照如下代码为body应用text-align属性：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body{</p><p>text-align:center;</p><p>}</p><p>之后会出现什么问题吗？body的所有子孙元素都会被居中显示。</p><p>因此，我们就需要用再写一条规则，让其中的文本回到默认的居左对齐：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>p {</p><p>text-align:left;</p><p>}</p><p>可以想象这条附加的规则将带来一些不便。另外，真正完全遵循标准的浏览器并不会改变容器的位置，而只会让其中的文字居中显示。</p><p>&nbsp;</p><p>3.组合使用自动外边距和文本对齐</p><p>因为文本对齐居中方式有着良好的向下兼容性，且自动外边距方式也被大多数当代浏览器支持，所以很多设计师将二者组合起来使用，以期让居中效果得到最大限度的跨浏览器支持：</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>body {</p><p>text-align: center;</p><p>}</p><p>&nbsp;</p><p>#container {</p><p>margin-left: auto;</p><p>margin-right: auto;</p><p>border: 1px solid red;</p><p>width: 980px;</p><p>text-align: left</p><p>}</p><p>可是这始终是个hack，无论如何也算不上完美。我们还是需要为居中容器中的文本编写附加的规则，但至少在各个浏览器中看起来都不错。</p><p>&nbsp;</p><p>4.负外边距解决方案</p><p>负外边距解决方案远不是仅仅为元素添加负外边距这么简单。这种方法需要同时使用绝对定位和负外边距两种技巧。</p><p>&nbsp;</p><p>下面是该方案的具体实现方法。首先，创建一个包含居中元素的容器，然后将其绝对定位于相对页面左边边缘50%的位置。这样，该容器的左外边距将从页面50%宽度的位置开始算起。</p><p>&nbsp;</p><p>然后，将容器的左外边距值设置为负的容器宽度的一半。这样即可将该容器固定在页面水平方向的中点。</p><p>复制内容到剪贴板</p><p>代码:</p><p>&nbsp;</p><p>#container {</p><p>background: #ffc url(mid.jpg) repeat-y center;</p><p>position: absolute;</p><p>left: 50%;</p><p>width: 980px;</p><p>margin-left: -490px;</p><p>}</p><p></p><p>看，没有任何hack！虽然这并不是首选的解决方案，但也是个不错的方法，且适用性极广—甚至在Netscape Navigator 4.x中都没有任何问题，很令人吃惊，不是吗？所以若想得到最广泛的浏览器支持，那么这种方法将会是最好的选择</p><p><br></p>', '2017-4-11 15:00', 'position: absolute;绝对定位水平居中问题');
INSERT INTO `article` VALUES ('39', 'CodeMirror事件和常用方法', 'Arry', '<p>1.onChange(instance,changeObj)：codeMirror文本被修改后触发。</p><p>instance是一个当前的codemirror对象，changeObj是一个｛from，to，text[,removed][，origin]｝对象。其中from，to分别表示起始行对象和结束行对象，行对象包括ch：改变位置距离行头的间隔字符，line：改变的行数。text是一个字符串数组表示被修改的文本内容，即你输入的内容。</p><p>2.onBeforeChange(instance,changObj):内容改变前被调用</p><p>3.onCursorActivity(instance)：当鼠标点击内容区、选中内容、修改内容时被触发</p><p>4.onKeyHandled:(instance,name,event):当一个都dom元素的事件触发时调用，name为操作名称。</p><p>5.onInputRead(insatance,changeObj):当一个新的input从隐藏的textara读取出时调用</p><p>6.onBeforeSelectionChange(instance,obj):当选中的区域被改变时调用，obj对象是选择的范围和改变的内容（本人未测试成功）</p><p>7.onUpdate(instance):编辑器内容被改变时触发</p><p>8.onFocus(instance):编辑器获得焦点式触发</p><p>9.onBlur(instance):编辑器失去焦点时触发</p><p>常用方法：</p><p>getValue():获取编辑器文本内容</p><p>setValue(text):设置编辑器文本内容</p><p>getRange({line,ch},{line,ch}):获取指定范围内的文本内容第一个对象是起始坐标，第二个是结束坐标</p><p>replaceRange(replaceStr,{line,ch},{line,ch}):替换指定区域的内容</p><p>getLine(line)：获取指定行的文本内容</p><p>lineCount():统计编辑器内容行数</p><p>firstLine():获取第一行行数，默认为0，从开始计数</p><p>lastLine():获取最后一行行数</p><p>getLineHandle(line):根据行号获取行句柄</p><p>getSelection():获取鼠标选中区域的代码</p><p>replaceSelection(str):替换选中区域的代码</p><p>setSelection({line:num,ch:num1},{line:num2,ch:num3}):设置一个区域被选中</p><p>somethingSelected()：判断是否被选择</p><p>getEditor()：获取CodeMirror对像</p><p>undo()：撤销</p><p></p><p>redo():回退</p><p><br></p>', '2017-4-11 15:04', '概要：CodeMirror事件和常用方法 ');
INSERT INTO `article` VALUES ('40', 'CodeMirror事件和常用方法', 'Arry', '<p>1.onChange(instance,changeObj)：codeMirror文本被修改后触发。</p><p>instance是一个当前的codemirror对象，changeObj是一个｛from，to，text[,removed][，origin]｝对象。其中from，to分别表示起始行对象和结束行对象，行对象包括ch：改变位置距离行头的间隔字符，line：改变的行数。text是一个字符串数组表示被修改的文本内容，即你输入的内容。</p><p>2.onBeforeChange(instance,changObj):内容改变前被调用</p><p>3.onCursorActivity(instance)：当鼠标点击内容区、选中内容、修改内容时被触发</p><p>4.onKeyHandled:(instance,name,event):当一个都dom元素的事件触发时调用，name为操作名称。</p><p>5.onInputRead(insatance,changeObj):当一个新的input从隐藏的textara读取出时调用</p><p>6.onBeforeSelectionChange(instance,obj):当选中的区域被改变时调用，obj对象是选择的范围和改变的内容（本人未测试成功）</p><p>7.onUpdate(instance):编辑器内容被改变时触发</p><p>8.onFocus(instance):编辑器获得焦点式触发</p><p>9.onBlur(instance):编辑器失去焦点时触发</p><p>常用方法：</p><p>getValue():获取编辑器文本内容</p><p>setValue(text):设置编辑器文本内容</p><p>getRange({line,ch},{line,ch}):获取指定范围内的文本内容第一个对象是起始坐标，第二个是结束坐标</p><p>replaceRange(replaceStr,{line,ch},{line,ch}):替换指定区域的内容</p><p>getLine(line)：获取指定行的文本内容</p><p>lineCount():统计编辑器内容行数</p><p>firstLine():获取第一行行数，默认为0，从开始计数</p><p>lastLine():获取最后一行行数</p><p>getLineHandle(line):根据行号获取行句柄</p><p>getSelection():获取鼠标选中区域的代码</p><p>replaceSelection(str):替换选中区域的代码</p><p>setSelection({line:num,ch:num1},{line:num2,ch:num3}):设置一个区域被选中</p><p>somethingSelected()：判断是否被选择</p><p>getEditor()：获取CodeMirror对像</p><p>undo()：撤销</p><p></p><p>redo():回退</p><p><br></p>', '2017-4-11 15:06', '概要：CodeMirror事件和常用方法 ');
INSERT INTO `article` VALUES ('41', 'CodeMirror事件和常用方法', 'Arry', '<p>1.onChange(instance,changeObj)：codeMirror文本被修改后触发。</p><p>instance是一个当前的codemirror对象，changeObj是一个｛from，to，text[,removed][，origin]｝对象。其中from，to分别表示起始行对象和结束行对象，行对象包括ch：改变位置距离行头的间隔字符，line：改变的行数。text是一个字符串数组表示被修改的文本内容，即你输入的内容。</p><p>2.onBeforeChange(instance,changObj):内容改变前被调用</p><p>3.onCursorActivity(instance)：当鼠标点击内容区、选中内容、修改内容时被触发</p><p>4.onKeyHandled:(instance,name,event):当一个都dom元素的事件触发时调用，name为操作名称。</p><p>5.onInputRead(insatance,changeObj):当一个新的input从隐藏的textara读取出时调用</p><p>6.onBeforeSelectionChange(instance,obj):当选中的区域被改变时调用，obj对象是选择的范围和改变的内容（本人未测试成功）</p><p>7.onUpdate(instance):编辑器内容被改变时触发</p><p>8.onFocus(instance):编辑器获得焦点式触发</p><p>9.onBlur(instance):编辑器失去焦点时触发</p><p>常用方法：</p><p>getValue():获取编辑器文本内容</p><p>setValue(text):设置编辑器文本内容</p><p>getRange({line,ch},{line,ch}):获取指定范围内的文本内容第一个对象是起始坐标，第二个是结束坐标</p><p>replaceRange(replaceStr,{line,ch},{line,ch}):替换指定区域的内容</p><p>getLine(line)：获取指定行的文本内容</p><p>lineCount():统计编辑器内容行数</p><p>firstLine():获取第一行行数，默认为0，从开始计数</p><p>lastLine():获取最后一行行数</p><p>getLineHandle(line):根据行号获取行句柄</p><p>getSelection():获取鼠标选中区域的代码</p><p>replaceSelection(str):替换选中区域的代码</p><p>setSelection({line:num,ch:num1},{line:num2,ch:num3}):设置一个区域被选中</p><p>somethingSelected()：判断是否被选择</p><p>getEditor()：获取CodeMirror对像</p><p>undo()：撤销</p><p></p><p>redo():回退</p><p><br></p>', '2017-4-11 15:08', '概要：CodeMirror事件和常用方法 ');
INSERT INTO `article` VALUES ('42', '电梯在两层之间不断上下 六旬老人吓得瘫倒在地', 'keke', '<p><img src=\"http://n.sinaimg.cn/news/transform/20170411/loRK-fyecfam0242101.jpg\">网络图</p><p>华商报讯（记者 马虎振）“当时电梯在8楼和9楼之间不断地上来下去，就是不开门，所有按键都不管用……”昨日上午，患有心脏病的64岁王女士遇到这一情形，吓得腿都软了。</p><p>电梯惊魂：</p><p>电梯在8楼9楼间反复上下</p><p>王女士家住丁白路巴厘公馆小区。她说，昨日上午9时10分左右，她从9楼家里出来乘电梯下楼，进入轿厢后按1楼按键后，电梯以比平时快几倍的速度降到6楼后不动了。她去按轿厢面板上的那些按键，都没反应，按开门键也没用。就在她疑惑时，电梯突然又升到9楼。她赶紧按开门键，还是打不开。电梯又降到8楼，之后就一直在8楼、9楼之间来回上下。</p><p>“我按紧急呼叫按钮一直按了两三分钟，只听见报警声，就是没人接。后来我看见上面的96333标志，就赶紧打电话给96333。工作人员问了情况后，问我是在哪一层进的电梯，我说是在9楼。工作人员又问我现在是上还是下，我说是上，工作人员说那你赶紧按9楼。”</p><p>王女士说：“我按下9楼的按键后，电梯这次到了9楼终于打开了。当时我吓得腿都软了，坐在了电梯地面上。幸亏带着速效救心丸，赶紧吃了。电梯门开了后我赶紧往出爬，出来以后身体都不能动。这时邻家的一个小伙子正准备下楼，他赶紧把我搀扶起来，并给物业打了电话。”</p><p>物业经理：</p><p>我在外面处理事情回不来</p><p>王女士的老伴于先生说，老伴因心脏病住院，这才刚出院五六天。事发后他向物业人员要物业经理的电话，想反映一下这情况，值班物业人员起初不愿给，后来打通了，物业经理说他在外面处理事情回不来。</p><p></p><p>这次发生意外的电梯是该小区二单元3号梯。11时50分，于先生带着记者来到这部电梯前，按上行键后一直不见灯亮。于先生说，事发后电梯已被暂停。</p><p><br></p>', '2017-4-11 15:10', '电梯的门老打不开呀?');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) NOT NULL COMMENT '用户id',
  `articleid` int(11) NOT NULL COMMENT '文章ID',
  `content` varchar(255) NOT NULL DEFAULT '' COMMENT '评论内容',
  `createtime` varchar(30) DEFAULT NULL COMMENT '创建评论时间',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=35 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1', '14', '42', '评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容....', '2017-04-12 10:02:54');
INSERT INTO `comment` VALUES ('2', '6', '42', '嘻嘻哈哈评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容....', '2017-04-12 13:42:22');
INSERT INTO `comment` VALUES ('3', '14', '42', '这是一条心评论', '2017-04-12 14:53:20');
INSERT INTO `comment` VALUES ('4', '14', '42', '这是柯柯的新评论', '2017-04-12 14:54:39');
INSERT INTO `comment` VALUES ('5', '14', '42', '这是柯柯的新评论', '2017-04-12 14:56:39');
INSERT INTO `comment` VALUES ('6', '14', '42', '这是柯柯的新评论', '2017-04-12 15:14:08');
INSERT INTO `comment` VALUES ('7', '5', '42', '这是一个漆黑的白天', '2017-04-12 15:15:51');
INSERT INTO `comment` VALUES ('8', '14', '42', '7878', '2017-04-12 16:02:56');
INSERT INTO `comment` VALUES ('9', '14', '42', '7878', '2017-04-12 16:03:07');
INSERT INTO `comment` VALUES ('10', '14', '42', '7878', '2017-04-12 16:22:47');
INSERT INTO `comment` VALUES ('11', '14', '42', '7878', '2017-04-12 16:24:08');
INSERT INTO `comment` VALUES ('12', '14', '42', '7878', '2017-04-12 16:24:20');
INSERT INTO `comment` VALUES ('13', '14', '42', '7878阿斯蒂芬', '2017-04-12 16:29:24');
INSERT INTO `comment` VALUES ('14', '14', '42', '7878阿斯蒂芬', '2017-04-12 16:29:47');
INSERT INTO `comment` VALUES ('15', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:34:30');
INSERT INTO `comment` VALUES ('16', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:36:30');
INSERT INTO `comment` VALUES ('17', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:40:52');
INSERT INTO `comment` VALUES ('18', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:41:12');
INSERT INTO `comment` VALUES ('19', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:41:24');
INSERT INTO `comment` VALUES ('20', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:42:40');
INSERT INTO `comment` VALUES ('21', '14', '42', '这是一天2017年4月12日16:34:25', '2017-04-12 16:43:07');
INSERT INTO `comment` VALUES ('22', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 10:04:22');
INSERT INTO `comment` VALUES ('23', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 10:05:03');
INSERT INTO `comment` VALUES ('24', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 10:05:20');
INSERT INTO `comment` VALUES ('25', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 10:06:17');
INSERT INTO `comment` VALUES ('26', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 10:07:54');
INSERT INTO `comment` VALUES ('27', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 16:38:47');
INSERT INTO `comment` VALUES ('28', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 16:42:52');
INSERT INTO `comment` VALUES ('29', '14', '42', '这是新的一天(*^__^*) 嘻嘻……', '2017-04-13 16:43:59');
INSERT INTO `comment` VALUES ('30', '14', '42', '\n965', '2017-4-13 16:45:25');
INSERT INTO `comment` VALUES ('31', '14', '41', '\n965', '2017-4-13 16:46:12');
INSERT INTO `comment` VALUES ('32', '14', '41', '\n965', '2017-4-13 16:48:02');
INSERT INTO `comment` VALUES ('33', '14', '41', '\n965', '2017-4-13 16:55:46');
INSERT INTO `comment` VALUES ('34', '14', '41', '', '2017-4-13 17:14:50');

-- ----------------------------
-- Table structure for tb_info
-- ----------------------------
DROP TABLE IF EXISTS `tb_info`;
CREATE TABLE `tb_info` (
  `info_id` int(10) NOT NULL AUTO_INCREMENT,
  `info1` varchar(100) DEFAULT NULL,
  `info2` varchar(100) DEFAULT NULL,
  `info3` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`info_id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_info
-- ----------------------------
INSERT INTO `tb_info` VALUES ('1', 'a1', 'a2', 'a3');
INSERT INTO `tb_info` VALUES ('2', 'b1', 'b2', 'b3');
INSERT INTO `tb_info` VALUES ('3', 'c1', 'c2', 'c3');
INSERT INTO `tb_info` VALUES ('4', 'd1', 'd2', 'd3');
INSERT INTO `tb_info` VALUES ('5', 'e1', 'e2', 'e3');
INSERT INTO `tb_info` VALUES ('6', 'f1', 'f2', 'f3');
INSERT INTO `tb_info` VALUES ('7', 'g1', 'g2', 'g3');
INSERT INTO `tb_info` VALUES ('8', 'h1', 'h2', 'h3');
INSERT INTO `tb_info` VALUES ('9', 'i1', 'i2', 'i3');
INSERT INTO `tb_info` VALUES ('10', 'j1', 'j2', 'j3');
INSERT INTO `tb_info` VALUES ('11', 'k1', 'k2', 'k3');
INSERT INTO `tb_info` VALUES ('12', 'l1', 'l2', 'l3');
INSERT INTO `tb_info` VALUES ('13', 'm1', 'm2', 'm3');
INSERT INTO `tb_info` VALUES ('14', 'n1', 'n2', 'n3');
INSERT INTO `tb_info` VALUES ('15', 'o1', 'o2', 'o3');
INSERT INTO `tb_info` VALUES ('16', 'p1', 'p2', 'p3');
INSERT INTO `tb_info` VALUES ('17', 'q1', 'q2', 'q3');
INSERT INTO `tb_info` VALUES ('18', 'r1', 'r2', 'r3');
INSERT INTO `tb_info` VALUES ('19', 's1', 's2', 's3');
INSERT INTO `tb_info` VALUES ('20', 't1', 't2', 't3');
INSERT INTO `tb_info` VALUES ('21', 'u1', 'u2', 'u3');
INSERT INTO `tb_info` VALUES ('22', 'v1', 'v2', 'v3');
INSERT INTO `tb_info` VALUES ('23', 'w1', 'w2', 'w3');
INSERT INTO `tb_info` VALUES ('24', 'x1', 'x2', 'x3');
INSERT INTO `tb_info` VALUES ('25', 'y1', 'y2', 'y3');
INSERT INTO `tb_info` VALUES ('26', 'z1', 'z2', 'z3');

-- ----------------------------
-- Table structure for tb_menu
-- ----------------------------
DROP TABLE IF EXISTS `tb_menu`;
CREATE TABLE `tb_menu` (
  `menu_id` int(10) NOT NULL AUTO_INCREMENT,
  `menu_name` varchar(20) DEFAULT NULL,
  `menu_url` varchar(100) DEFAULT NULL,
  `parent_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`menu_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_menu
-- ----------------------------
INSERT INTO `tb_menu` VALUES ('1', '系统管理1', '', null);
INSERT INTO `tb_menu` VALUES ('2', '业务管理15454', '', null);
INSERT INTO `tb_menu` VALUES ('3', 'XX管理3', '', null);
INSERT INTO `tb_menu` VALUES ('5', '用户管理', 'user.html', '1');
INSERT INTO `tb_menu` VALUES ('6', '角色管大小单双', 'role.html', '1');
INSERT INTO `tb_menu` VALUES ('7', '菜单管理', 'menu.html', '1');
INSERT INTO `tb_menu` VALUES ('8', '分页', 'info.html', '2');
INSERT INTO `tb_menu` VALUES ('9', 'bbb', '', '2');
INSERT INTO `tb_menu` VALUES ('10', '分页测试', 'info.html', '3');
INSERT INTO `tb_menu` VALUES ('11', 'dfsdf', '', '3');
INSERT INTO `tb_menu` VALUES ('12', 'e', '', '3');
INSERT INTO `tb_menu` VALUES ('15', 'ccc', '', '2');
INSERT INTO `tb_menu` VALUES ('16', 'YY管理', '', null);
INSERT INTO `tb_menu` VALUES ('17', '11111', '', '16');
INSERT INTO `tb_menu` VALUES ('18', '22222', '', '16');
INSERT INTO `tb_menu` VALUES ('19', '33333', '', '16');
INSERT INTO `tb_menu` VALUES ('20', '44444', '', '16');

-- ----------------------------
-- Table structure for tb_role
-- ----------------------------
DROP TABLE IF EXISTS `tb_role`;
CREATE TABLE `tb_role` (
  `role_id` int(10) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(20) DEFAULT NULL,
  `rights` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_role
-- ----------------------------
INSERT INTO `tb_role` VALUES ('1', '系统管理员', '35822');
INSERT INTO `tb_role` VALUES ('2', '普通用户', '2038792');
INSERT INTO `tb_role` VALUES ('3', '系统用户', '230374');

-- ----------------------------
-- Table structure for tb_user
-- ----------------------------
DROP TABLE IF EXISTS `tb_user`;
CREATE TABLE `tb_user` (
  `user_id` int(10) NOT NULL AUTO_INCREMENT,
  `loginname` varchar(20) DEFAULT NULL,
  `password` varchar(20) DEFAULT NULL,
  `username` varchar(20) DEFAULT NULL,
  `rights` varchar(100) DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL,
  `role_id` int(10) DEFAULT NULL,
  `last_login` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_user
-- ----------------------------
INSERT INTO `tb_user` VALUES ('1', 'admin', 'admin', '管理员1', '38894', '0', '1', '2011-07-05 10:35:35');
INSERT INTO `tb_user` VALUES ('2', 'user1', '111111', '用户A1a', '40716', '0', '2', null);
INSERT INTO `tb_user` VALUES ('3', 'user2', '111111', '用户B', null, '0', null, '2011-06-13 15:39:08');
INSERT INTO `tb_user` VALUES ('4', 'user3', '111111', '用户3', null, '0', null, '2011-06-13 15:35:42');
INSERT INTO `tb_user` VALUES ('5', 'aaa', '1111', 'aaa', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('6', 'bbb', '111111', 'dsfdsf2', null, '0', '2', null);
INSERT INTO `tb_user` VALUES ('7', 'fffff', '1', 'ddds', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('10', 'abc', '111111', 'dsfdsf2x', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('11', 'user4', '111111', 'afdsf', null, '0', '1', null);
INSERT INTO `tb_user` VALUES ('12', 'test1', '111111', 'aaa', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('13', 'test2', '222222', '222', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('14', 'tes3', '333333', '333', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('15', 'test4', '222222', 'somebody', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('16', 'test5', '111111', 'dsfdsf', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('17', 'test6', '111111', '1', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('18', 'test7', '111111', 'dsfdsf', null, '0', null, null);
INSERT INTO `tb_user` VALUES ('20', '嘻嘻哈哈', '嘻嘻哈哈', '嘻嘻哈哈', '嘻嘻哈哈', '0', '0', '0000-00-00 00:00:00');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `nicknane` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `admin` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('14', 'admin', '698d51a19d8a121ce581499d7b701668', '嘻哈小C', '', '1');
INSERT INTO `user` VALUES ('4', '54894', '202cb962ac59075b964b07152d234b70', '', '', '0');
INSERT INTO `user` VALUES ('5', 'wxc021', '698d51a19d8a121ce581499d7b701668', '', '', '0');
INSERT INTO `user` VALUES ('6', 'www', '202cb962ac59075b964b07152d234b70', '', '', '0');
INSERT INTO `user` VALUES ('7', 'www', '202cb962ac59075b964b07152d234b70', '', '', '1');
INSERT INTO `user` VALUES ('8', 'http://www.baidu.com', 'd41d8cd98f00b204e9800998ecf8427e', '', '', '0');
INSERT INTO `user` VALUES ('9', '1234', 'd41d8cd98f00b204e9800998ecf8427e', '嘻哈小CC', '875770925@qq.com', '0');
INSERT INTO `user` VALUES ('10', 'www', '202cb962ac59075b964b07152d234b70', '', '', '0');
INSERT INTO `user` VALUES ('12', '5146', '202cb962ac59075b964b07152d234b70', '', '', '0');
INSERT INTO `user` VALUES ('13', '4564564', '202cb962ac59075b964b07152d234b70', '', '', '0');
